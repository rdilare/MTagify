import json


class JH:
    def __init__(self):
        self.db_filename = "data.json"
        self.data = dict()
        self.prev_data = dict()
        self.create_file()
        self.load()

    def load(self):
        with open(self.db_filename,"r") as f:
            self.data = json.load(f)
            self.prev_data = self.data

        with open(self.db_filename+".bak", "w") as f:
            json.dump(self.prev_data, f, indent=2)

    def add_data(self,data):
        if not isinstance(data, dict):
            raise TypeError("data must be of dict type")
        if "id" in list(data.keys()):
            data_id = data["id"]
        else:
            data_id = self.get_new_id()
            data.update({"id":data_id})
        self.data.update({data_id:data})
        self.save_to_file()
   

    def remove_by_id(self,song_id):
        song = {}
        if song_id in self.data.keys():
            song = self.data.pop(song_id)
            self.save_to_file()
        return song

    def get_data(self):
        return self.data

    def get_new_id(self):
        keys = list(self.data.keys())
        new_id = ""
        current_id = 0
        for i in range(len(keys)-1):
            current_id = int(keys[i])
            if int(keys[i+1])-int(keys[i])>1:
                break
        if not len(keys):
            new_id = str(current_id)
        elif current_id==int(keys[-2]):
            new_id = str(int(keys[-1])+1)
        else:
            new_id = str(current_id+1)
        return new_id

    def create_file(self):
        with open(self.db_filename,"a") as f:
            print("creating file: data.json")

    def save_to_file(self):
        with open(self.db_filename,"w") as f:
            json.dump(self.data, f, indent=2)


x = JH()
print("\nbefore",x.get_data())
#x.add_data({"name": "naem_2","age": 21})
song = x.remove_by_id("2")
print("\nsong: ",song)
print("after\n",x.get_data())
